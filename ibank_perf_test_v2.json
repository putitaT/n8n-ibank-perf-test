{
  "name": "ibank perf test",
  "nodes": [
    {
      "parameters": {
        "command": "=/home/jmeterusr/apache-jmeter-5.6.3/bin/jmeter -n \\\n  -t /home/jmeterusr/perf-ibank-phase4.2/n8n/script_60s_50usr5rup/{{ $('Information Extractor').item.json.output.env }}/{{ $('Information Extractor').item.json.output.input_file }}.jmx \\\n  -l /home/jmeterusr/perf-ibank-phase4.2/n8n/result_60s_50usr5rup/{{ $('Information Extractor').item.json.output.env }}/{{ $('Information Extractor').item.json.output.output_file }}.csv \\\n  -Jjmeter.save.saveservice.output_format=csv \\\n  -Jjmeter.save.saveservice.response_data=true"
      },
      "type": "n8n-nodes-base.ssh",
      "typeVersion": 1,
      "position": [
        1480,
        400
      ],
      "id": "f8f76f3a-4857-4163-a332-0c601ca2e931",
      "name": "SSH",
      "credentials": {
        "sshPassword": {
          "id": "BhJSBbsJ97gVrZrd",
          "name": "SSH Password account"
        }
      }
    },
    {
      "parameters": {
        "text": "={{ $json.chatInput }}",
        "attributes": {
          "attributes": [
            {
              "name": "input_file",
              "description": "input file's name ",
              "required": true
            },
            {
              "name": "output_file",
              "description": "output file's name ",
              "required": true
            },
            {
              "name": "env",
              "description": "environment",
              "required": true
            },
            {
              "name": "isGenToken",
              "type": "boolean",
              "description": "flag for generate access token"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1,
      "position": [
        260,
        280
      ],
      "id": "bf1084c2-2360-4a2c-aabd-c8605f0d387b",
      "name": "Information Extractor"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        40,
        280
      ],
      "id": "73501319-d090-4672-bf09-5a45f92c3b34",
      "name": "When chat message received",
      "webhookId": "47bbc8b8-c4dd-4f8b-b1e9-881b070c1f5d"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1540,
        940
      ],
      "id": "f514beda-1a0e-4ac3-82eb-bbd9aacbd562",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "c7IWfvVR3HvZf7IM",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "path": "=/home/jmeterusr/perf-ibank-phase4.2/n8n/script_60s_50usr5rup/{{ $('Information Extractor').item.json.output.env }}",
        "options": {
          "fileName": "={{ $json.fileName }}"
        }
      },
      "type": "n8n-nodes-base.ssh",
      "typeVersion": 1,
      "position": [
        1300,
        400
      ],
      "id": "d3aae720-5604-49b7-b2d4-2be2237c5c35",
      "name": "Upload File",
      "credentials": {
        "sshPassword": {
          "id": "BhJSBbsJ97gVrZrd",
          "name": "SSH Password account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4262e962-cea0-4938-a283-6bc9a336ed49",
              "leftValue": "={{ $json.output.isGenToken }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        620,
        280
      ],
      "id": "929f80ca-e26c-4875-8cb6-9a4784603de9",
      "name": "If"
    },
    {
      "parameters": {
        "command": "=cd /home/node/scripts/ibank-{{ $json.output.env }} && make upload-nginx-perf"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        920,
        140
      ],
      "id": "dd59beb6-6cfa-433d-bd6a-fd1f2230bfa8",
      "name": "Upload .csv"
    },
    {
      "parameters": {
        "resource": "file",
        "binaryPropertyName": "csv",
        "path": "=/home/jmeterusr/perf-ibank-phase4.2/csv",
        "options": {}
      },
      "type": "n8n-nodes-base.ssh",
      "typeVersion": 1,
      "position": [
        1460,
        140
      ],
      "id": "6817774f-c522-441f-b08f-68b002cfcf40",
      "name": "Upload .csv to jmeter",
      "credentials": {
        "sshPassword": {
          "id": "BhJSBbsJ97gVrZrd",
          "name": "SSH Password account"
        }
      }
    },
    {
      "parameters": {
        "fileSelector": "=/home/node/script_60s_50usr5rup/{{ $('Information Extractor').item.json.output.input_file }}.jmx",
        "options": {
          "fileName": "={{ $('Information Extractor').item.json.output.input_file }}.jmx"
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1100,
        400
      ],
      "id": "0983bd47-e8ce-4256-8bba-f4693f77ef02",
      "name": "Read .jmx script"
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "download",
        "path": "=/home/jmeterusr/perf-ibank-phase4.2/n8n/result_60s_50usr5rup/{{ $('Information Extractor').item.json.output.env }}/{{ $('Information Extractor').item.json.output.output_file }}.csv",
        "options": {}
      },
      "type": "n8n-nodes-base.ssh",
      "typeVersion": 1,
      "position": [
        1720,
        400
      ],
      "id": "a09198dd-7b08-48e6-aaee-ad27e383d1b9",
      "name": "Download result from jmeter",
      "credentials": {
        "sshPassword": {
          "id": "BhJSBbsJ97gVrZrd",
          "name": "SSH Password account"
        }
      }
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/home/node/result_60s_50usr5rup/{{ $('Information Extractor').item.json.output.output_file }}.csv",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1900,
        400
      ],
      "id": "bf4b6bf8-16c4-460c-9a6b-68fbe95d4633",
      "name": "Write Files"
    },
    {
      "parameters": {
        "text": "={{ $('SSH').item.json.stdout }}",
        "attributes": {
          "attributes": [
            {
              "name": "start_time",
              "description": "start time when starting test (ex output: 2025 May 28 15:16:51 ICT)",
              "required": true
            },
            {
              "name": "end_time",
              "description": "end time when the test run is complete (ex output: 2025 May 28 15:16:51 ICT)",
              "required": true
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1,
      "position": [
        1720,
        640
      ],
      "id": "358efc65-f0cf-4330-957e-adde1ba47c8c",
      "name": "Start/End Time Perf Test Data"
    },
    {
      "parameters": {
        "fileSelector": "=/home/node/scripts/ibank-{{ $('Information Extractor').item.json.output.env }}/perf-phase3/csv/user_token.csv",
        "options": {
          "dataPropertyName": "csv"
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1280,
        140
      ],
      "id": "488afe54-bce4-4466-ba31-13516d8e71ec",
      "name": "Read .csv"
    },
    {
      "parameters": {
        "content": "## Gen Token\n**Step:** generate token from better-life and update to server jmeter",
        "height": 260,
        "width": 780
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        860,
        40
      ],
      "typeVersion": 1,
      "id": "2a78e5d8-113a-470c-8c19-35df2b92fddf",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "command": "=cd /home/node/scripts/ibank-{{ $('If').item.json.output.env }} && make update-perf-csv"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        140
      ],
      "id": "1cbc18c8-d25b-4823-a965-b5fec9b28b0f",
      "name": "Get token.csv"
    },
    {
      "parameters": {
        "options": {
          "headerRow": true,
          "rawData": true
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        2080,
        400
      ],
      "id": "ae7b36f4-5777-4f43-9305-2bada79d3e82",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{\n(() => {\n  const data = $('Extract from File').all();\n\n  // Group by label\n  const grouped = {};\n  data.forEach(item => {\n    const label = item.json.label;\n    if (!grouped[label]) {\n      grouped[label] = [];\n    }\n    grouped[label].push(item);\n  });\n\n  const result = {};\n\n  for (const label in grouped) {\n    const group = grouped[label];\n    const samples = group.length;\n    const elapsedValues = group.map(item => Number(item.json.elapsed));\n\n    const average = Math.floor(elapsedValues.reduce((sum, val) => sum + val, 0) / samples).toFixed(2);\n    const min = Math.min(...elapsedValues).toFixed(2);\n    const max = Math.max(...elapsedValues).toFixed(2);\n\n    const mean = elapsedValues.reduce((sum, val) => sum + val, 0) / samples;\n    const variance = elapsedValues.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / samples;\n    const std_dev = (Math.round(Math.sqrt(variance) * 100) / 100).toFixed(2);\n\n    const errorCount = group.filter(item => item.json.success !== \"true\").length;\n    const error_percent = `${((errorCount / samples) * 100).toFixed(2)}%`;\n\n    const firstStart = Number(group[0].json.timeStamp);\n    const lastStart = Number(group[group.length - 1].json.timeStamp);\n    const lastElapsed = Number(group[group.length - 1].json.elapsed);\n    const duration = (lastStart + lastElapsed - firstStart) / 1000;\n    const throughput = duration > 0 ? (samples / duration).toFixed(2) : \"0.00\";\n\n    const totalBytes = group.reduce((sum, item) => sum + Number(item.json.bytes), 0);\n    const received_kb_per_sec = duration > 0 ? Number((totalBytes / duration / 1024).toFixed(2)) : 0;\n\n    const totalSentBytes = group.reduce((sum, item) => sum + Number(item.json.sentBytes), 0);\n    const sent_kb_per_sec = duration > 0 ? Number((totalSentBytes / duration / 1024).toFixed(2)) : 0;\n\n    const avg_bytes = (totalBytes / samples).toFixed(2);\n\n    result[label] = {\n      samples: samples.toFixed(2),\n      average,\n      min,\n      max,\n      std_dev,\n      error_percent,\n      throughput,\n      received_kb_per_sec,\n      sent_kb_per_sec,\n      avg_bytes\n    };\n  }\n\n  return result;\n})()\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2280,
        400
      ],
      "id": "9b5ed70c-e386-4182-959e-257789b05bbb",
      "name": "Edit Fields",
      "executeOnce": true
    },
    {
      "parameters": {
        "jsCode": "const original = $('Edit Fields').first().json;  // input จาก node ก่อนหน้า\nconst result = [];\n\nfor (const label in original) {\n  const data = original[label];\n  result.push({\n    json: {\n      \"Label\": label,\n      \"# Samples\": data.samples,\n      \"Average\": data.average,\n      \"Min\": data.min,\n      \"Max\": data.max,\n      \"Std. Dev.\": data.std_dev,\n      \"Error %\": data.error_percent,\n      \"Throughput\": data.throughput,\n      \"Received KB/sec\": data.received_kb_per_sec,\n      \"Sent KB/sec\": data.sent_kb_per_sec,\n      \"Avg. Bytes\": data.avg_bytes\n    }\n  });\n}\n\nreturn result;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2460,
        400
      ],
      "id": "5a9a1048-d90d-4fbb-bac1-12b9a2eeadef",
      "name": "Code",
      "executeOnce": true
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Information Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Start/End Time Perf Test Data",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Information Extractor": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SSH": {
      "main": [
        [
          {
            "node": "Download result from jmeter",
            "type": "main",
            "index": 0
          },
          {
            "node": "Start/End Time Perf Test Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload File": {
      "main": [
        [
          {
            "node": "SSH",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Upload .csv",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Read .jmx script",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload .csv": {
      "main": [
        [
          {
            "node": "Get token.csv",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload .csv to jmeter": {
      "main": [
        [
          {
            "node": "Read .jmx script",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read .jmx script": {
      "main": [
        [
          {
            "node": "Upload File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download result from jmeter": {
      "main": [
        [
          {
            "node": "Write Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write Files": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start/End Time Perf Test Data": {
      "main": [
        []
      ]
    },
    "Read .csv": {
      "main": [
        [
          {
            "node": "Upload .csv to jmeter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get token.csv": {
      "main": [
        [
          {
            "node": "Read .csv",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1a0b4a45-4536-43ac-8d82-bd69cc1f8f09",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "65722b01fef471d9bb8d059fce788e8e7d02bd91690744ee000f0c25a46e94f4"
  },
  "id": "bPCRivi84AZZFN9R",
  "tags": []
}